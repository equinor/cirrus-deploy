#!/usr/bin/env python3
from __future__ import annotations
import os, os.path
import argparse
from pathlib import Path
from dataclasses import dataclass


SCRIPT = """\
#!/usr/bin/bash

cd "{workdir}"
export PATH="{bin}:$PATH"

arg_num_mpi={num_mpi}
arg_mpi_transport=
arg_machinefile=

if [ -n "$LSB_MCPU_HOSTS" ]; then  # LSF
    arg_num_mpi=$(wc -l < $LSB_DJOB_RANKFILE)
    arg_machinefile="-machinefile $LSB_DJOB_RANKFILE"
elif [ -n "$PBS_NODEFILE" ]  # PBS
    arg_num_mpi=$(wc -l < $PBS_NODEFILE)
    arg_machinefile="-machinefile $PBS_NODEFILE"
fi

# Check for possibly non-working RDMA transport
if /usr/sbin/lsmod | egrep -qw bnxt_re
then
    arg_mpi_transport="-mca btl vader,self,tcp -mca pml ^ucx"
fi

# -display-map is just for debugging MPI layout
exec mpirun -display-map $arg_mpi_transport $arg_machinefile -np $arg_num_mpi cirrus -cirrusin "{input_file}"
"""


@dataclass
class Arguments:
    input: str
    queue: str | None
    num_mpi_per_node: int
    num_nodes: int


def parse_args() -> Arguments:
    ap = argparse.ArgumentParser(
        description="Wrapper for running Cirrus with MPI in Equinor"
    )
    ap.add_argument("input", help="Cirrus .in input file")
    ap.add_argument("-q", "--queue", help="Job queue")
    ap.add_argument(
        "-nm",
        "--num_mpi_per_node",
        type=int,
        default=1,
        help="Number of MPI processes per node",
    )
    ap.add_argument(
        "-nn",
        "--num_nodes",
        type=int,
        default=1,
        help="Number of nodes",
    )
    return Arguments(**vars(ap.parse_args()))


def main() -> None:
    args = parse_args()

    input_file = Path(args.input).resolve()

    NUM_THREADS_PER_MPI = 1
    num_mpi_per_node = args.num_mpi_per_node
    num_nodes = args.num_nodes
    num_mpi = num_mpi_per_node * num_nodes
    num_cpu = NUM_THREADS_PER_MPI * num_mpi
    num_threads_per_node = num_mpi_per_node * NUM_THREADS_PER_MPI

    script = input_file.parent / f"{input_file.stem}_job.sh"
    script.write_text(
        SCRIPT.format(
            bin=Path(__file__).parent,
            workdir=input_file.parent,
            num_mpi=num_mpi,
            input_file=input_file,
        )
    )

    resource_params = [
        "select[x86_64linux]",
        f"span[ptile={num_mpi_per_node}]",
        "same[type:model]",
    ]
    if 1 < num_threads_per_node < 5:
        resource_params.append(f"affinity[core({num_threads_per_node})]")

    os.execvp(
        "bsub",
        [
            "bsub",
            "-L",
            "/bin/csh",
            *(["-q", args.queue] if args.queue else []),
            "-n",
            str(num_cpu),
            "-o",
            f"{input_file.parent}/{input_file.stem}_bsub.LOG",
            "-J",
            f"Cirrus[{input_file.name}]",
            "-R",
            " ".join(resource_params),
            "bash",
            script,
        ],
    )


if __name__ == "__main__":
    main()
