#!/usr/bin/env bash
# This script assumes that it's being ran inside of a
# quay.io/pypa/manylinux2014_x86_64 OCI image.
#
# To run manually:
# podman run --rm -it -v$PWD:$PWD:z -w$PWD quay.io/pypa/manylinux2014_x86_64 ./build_using_manylinux2014
set -ex

petsc_rev="v3.20.6"
pflotran_ogs_version="1.8"
pflotran_ogs_rev="11"

petsc_url="https://gitlab.com/petsc/petsc.git"
pflotran_ogs_url="https://bitbucket.org/opengosim/pflotran_ogs_${pflotran_ogs_version}.git"

out="$PWD/result"
tar="$PWD/pflotran_ogs-${pflotran_ogs_version}.${pflotran_ogs_rev}-x86_64v3-rhel7-linux-gnu.tar.xz"

# --------------------------------------
# Clone
# --------------------------------------
git clone --depth=1 --branch="${petsc_rev}" -- "${petsc_url}" /tmp/petsc
git clone --depth=1 --branch="sv${pflotran_ogs_rev}" -- "${pflotran_ogs_url}" /tmp/pflotran_ogs

# --------------------------------------
# Prepare environment
# --------------------------------------

# When running interactively, enter bash on error
if tty -s
then
    echo "INFO: Enabling bash shell on error"
    function on_err {
        echo "!!! ERROR DURING BUILD !!!" >&2
        bash
    }
    trap on_err ERR
fi

# Remove output if previously generated
rm -rf $out
rm -f $tar

# Install additional dependencies
yum install -y devtoolset-10-make flex

# Add Python to path
export PATH=/opt/python/cp38-cp38/bin:$PATH

# --------------------------------------
# Build petsc
# --------------------------------------
cd /tmp/petsc

export PETSC_DIR=$PWD
export PETSC_ARCH=gnu-c-opt

./configure                                  \
    --CFLAGS="-O3"                           \
    --CXXFLAGS="-O3"                         \
    --FFLAGS="-O3"                           \
    --LDFLAGS="-Wl,-rpath,\\\$ORIGIN/../lib" \
    --MAKEFLAGS="-j$(nproc)"                 \
    --download-fblaslapack=yes               \
    --download-hdf5=yes                      \
    --download-hypre=yes                     \
    --download-openmpi=yes                   \
    --download-ptscotch=yes                  \
    --with-hdf5-fortran-bindings=yes         \
    --prefix=$out

make all
make install

# --------------------------------------
# Build PFLOTRAN-OGS
# --------------------------------------
cd /tmp/pflotran_ogs/src/pflotran

make UPDATE_PROVENANCE=0 pflotran
patchelf --set-rpath "\$ORIGIN/../lib" pflotran
install -D pflotran $out/bin/pflotran

# --------------------------------------
# Bundle result
# --------------------------------------
libs=(
    /usr/lib64/libgfortran.so.5
    /usr/lib64/libgfortran.so.5.0.0
    /usr/lib64/libquadmath.so.0
    /usr/lib64/libquadmath.so.0.0.0
    /usr/lib64/libz.so.1
    /usr/lib64/libz.so.1.2.7
)

# Delete unrelated files
rm -r $out/include

rm $out/lib/*.a
rm $out/lib/*.la
rm $out/lib/*.mod
rm $out/lib/libhdf5.settings
rm -r $out/lib/openmpi
rm -r $out/lib/petsc
rm -r $out/lib/pkgconfig
rm -r $out/lib/pmix

rm $out/bin/*.pl
rm $out/bin/gif2h5
rm $out/bin/h5*
rm $out/bin/mpiCC
rm $out/bin/mpic*
rm $out/bin/mpif*
rm $out/bin/ompi*
rm $out/bin/opal_wrapper
rm $out/bin/ortecc
rm $out/bin/perf
rm $out/bin/ph5diff

# Copy dependencies to $out/lib and patch them
mkdir -p $out/lib
for lib in ${libs[@]}; do
    name=$(basename $lib)
    cp $lib $out/lib/$name
done

# Patch RPATH in $out/lib
for lib in $out/lib/*; do
    if [ ! -L "$lib" ]; then
        patchelf --set-rpath "\$ORIGIN" "$lib"
    fi
done

# Patch RPATH in $out/bin
for bin in $out/bin/*; do
    if [ ! -L "$bin" ]; then
        patchelf --set-rpath "\$ORIGIN/../lib" "$bin"
    fi
done

# Build
tar --create --xz --file=$tar "-C$out" .
